// Firestore Security Rules - Copy these to your Firebase Console

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if request.auth != null && (
        resource.data.patientId == request.auth.uid || 
        resource.data.doctorId == request.auth.uid || 
        isAdmin()
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.patientId;
      allow update: if request.auth != null && (
        resource.data.patientId == request.auth.uid || 
        resource.data.doctorId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Orders collection
    match /orders/{orderId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.pharmacyId == request.auth.uid || 
        isAdmin()
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.pharmacyId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Medicines collection
    match /medicines/{medicineId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'pharmacy';
      allow update: if request.auth != null && (
        resource.data.pharmacyId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if request.auth != null && (
        resource.data.pharmacyId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // Chat messages
    match /chats/{chatId}/messages/{messageId} {
      allow read: if request.auth != null && chatId.split('_').hasAny([request.auth.uid]);
      allow create: if request.auth != null && chatId.split('_').hasAny([request.auth.uid]);
      allow update: if request.auth != null && resource.data.senderId == request.auth.uid;
      allow delete: if request.auth != null && (
        resource.data.senderId == request.auth.uid || 
        isAdmin()
      );
    }
  }
}

// Storage Security Rules - Copy these to your Firebase Console Storage Rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // User profile images and documents
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Doctor files
    match /doctors/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Pharmacy files
    match /pharmacies/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat files
    match /chats/{chatId}/{allPaths=**} {
      allow read: if request.auth != null && chatId.split('_').hasAny([request.auth.uid]);
      allow write: if request.auth != null && chatId.split('_').hasAny([request.auth.uid]) &&
                   request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
  }
}
